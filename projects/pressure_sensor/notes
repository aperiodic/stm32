


A thread sleeping in chThdSleep() is not meant to be woken from another thread (even if calling chSchWakeupS() would work).

Consider the use of a semaphore initialized to zero, chSemInit(&sem, 0), in this role, chSemWait(&sem) waits on the semaphore, chSemReset(&sem, 0) wakes up all threads waiting resetting the semaphore to zero.

Events:
 EvTimer evt1, evt2;
  EventListener el0, el1, el2;
  uip_ipaddr_t ipaddr;


 chEvtRegister(macGetReceiveEventSource(&ETHD1), &el0, FRAME_RECEIVED_ID);
  chEvtAddFlags(EVENT_MASK(FRAME_RECEIVED_ID)); /* In case some frames are already buffered */

  evtInit(&evt1, MS2ST(500));
  evtStart(&evt1);
  chEvtRegister(&evt1.et_es, &el1, PERIODIC_TIMER_ID);

  evtInit(&evt2, S2ST(10));
  evtStart(&evt2);
  chEvtRegister(&evt2.et_es, &el2, ARP_TIMER_ID);





Condition Vars

 chCondInit(&c1)

#if CH_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif


chCondBroadcast(&c1);

chMtxLock(&m2);

 chMtxUnlock();

chMtxInit(&m1);


ADIS

Product id is: 4015 NOT 4105.

For 'normal' transactions: CS must de-assert between command
and read transactions.

For burst this is not necessary.

Can use exchange for burst, but for others must use startSend/startRead
commands.




    if (tp_dio1 != NULL) {
        tp_dio1->p_u.rdymsg = (msg_t) ADIS_DIO1_MSG;     /* Sending the message, optional.*/
        chSchReadyI(tp_dio1);
        tp_dio1 = NULL;
    }




/* Set a conditional var */
    chCondBroadcast(&adis_driver.adis_cv1);

